roles {
	role producer;
	role consumer;
};

struct project {
	field name text limit gt 0 limit lt 32 unique
		comment "The project name.  This is assumed to have some
			 sort of meaning between testers and backend.
			 As-is, the name is assumed to be the name of a
			 GitHub repository in my (kristapsdz) repo.  It
			 can be set as a compile-time value.";
	field id int rowid;

	search name: name byname;

	roles producer {
		search byname;
	};
};

struct user {
	comment "Users can be totally anonymous and are just used for
	 	 authenticating reports.
		 To create a user, you can `echo $RANDOM` for the apikey
		 and `jot -r -c 32 'A' '{' | rs -g0` for the secret.";

	field email email
		comment "Only used for logging purposes.";
	field apikey int limit gt 0 unique
		comment "Unique user identifier.";
	field apisecret text limit eq 32
		comment "Secret known to the database and the user, but
			 not transmitted between.  This is used for
			 authenticating reports.";
	field ctime epoch
		comment "When the user was created.";
	field id int rowid;

	search apikey: name bykey;

	roles producer {
		search bykey;
	};
};

struct report {
	comment "Test runner results for a single repository.  The epoch
		 fields are sequential, so they're either a time of
		 completion of zero on failure.  On failure, all
		 subsequent fields (e.g., build after depend) must fail
		 as well.
		 The log should be the standard error and output of
		 everything that has happened in the sequence---not just
		 the last failure.";

	field project struct projectid;

	field projectid:project.id;
	field userid:user.id;

	field start epoch
		comment "When the test runner started processing the
			 repository.";
	field env epoch
		comment "When the repository has been cloned/updated (ge
			 start or zero on failure.";
	field depend epoch
		comment "When dependencies have been checked (ge env or
			 equal or zero on failure or env failure).";
	field build epoch
		comment "When `make` has completed (ge depend or equal
			 to zero on failure or depend failure).";
	field test epoch
		comment "When `make regress` has completed (ge build or
			 equal to zero on failure or build failure).";
	field install epoch
		comment "When `make install` has completed (ge test or
			 equal to zero on failure or test failure).)";
	field distcheck epoch
		comment "When `make distcheck` has completed (ge install
			 or equal to zero on failure or install
			 failure).";
	field ctime epoch
		comment "When the report row was creatd.";
	field log text
		comment "If distcheck is zero, this is optionally set to
			 the full build log.  If distcheck is not zero,
			 this must be the empty string.";
	field unamem text limit le 128
		comment "Output of uname -m.";
	field unamen text limit le 128
		comment "Output of uname -n.";
	field unamer text limit le 128
		comment "Output of uname -r.";
	field unames text limit le 128
		comment "Output of uname -s.";
	field unamev text limit le 128
		comment "Output of uname -v.";
	field unamehash text limit eq 32
		comment "Hash of uname[mnrsv].  This is used to quickly
			 establish a kind of machine identity.";
	field projunamehash text limit eq 32 default ""
		comment "Hash of uname[mnrsv] and project identifier.  This is
			 used to group recent submissions from a given machine
			 for a given project.";
	field fetchhead text limit le 40 default ""
		comment "Git hash for branch master.  May be empty.";
			 

	field id int rowid;

	insert;

	iterate ctime ge, ctime le: limit 50 name lastdate order ctime desc;
	iterate project.name: name dashname order ctime desc grouprow projunamehash maxrow ctime;
	iterate unamehash: name dashuname order ctime desc grouprow projunamehash maxrow ctime;

	list: name dash order projectid,ctime desc grouprow projunamehash maxrow ctime;

	search id: name byid;

	roles consumer {
		list dash;
		iterate dashname;
		iterate dashuname;
		iterate lastdate;
		noexport userid;
		search byid;
	};

	roles producer {
		insert;
	};
};
